package mocks

import covenantmodels "github.com/yuderekyu/covenant/models"
import helpers "github.com/yuderekyu/covenant/helpers"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ghmeier/coinage/models"
import uuid "github.com/pborman/uuid"
import warehousemodels "github.com/lcollin/warehouse/models"

// SubscriptionI is an autogenerated mock type for the SubscriptionI type
type SubscriptionI struct {
	mock.Mock
}

// CheckCustomer provides a mock function with given fields: _a0
func (_m *SubscriptionI) CheckCustomer(_a0 uuid.UUID) (*models.Customer, error) {
	ret := _m.Called(_a0)

	var r0 *models.Customer
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Customer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *SubscriptionI) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) GetAll(_a0 int, _a1 int) ([]*covenantmodels.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*covenantmodels.Subscription
	if rf, ok := ret.Get(0).(func(int, int) []*covenantmodels.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*covenantmodels.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *SubscriptionI) GetByID(_a0 string) (*covenantmodels.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 *covenantmodels.Subscription
	if rf, ok := ret.Get(0).(func(string) *covenantmodels.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*covenantmodels.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoaster provides a mock function with given fields: _a0, _a1, _a2
func (_m *SubscriptionI) GetByRoaster(_a0 string, _a1 int, _a2 int) ([]*covenantmodels.Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*covenantmodels.Subscription
	if rf, ok := ret.Get(0).(func(string, int, int) []*covenantmodels.Subscription); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*covenantmodels.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *SubscriptionI) GetByUser(_a0 string, _a1 int, _a2 int) ([]*covenantmodels.Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*covenantmodels.Subscription
	if rf, ok := ret.Get(0).(func(string, int, int) []*covenantmodels.Subscription); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*covenantmodels.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserAndItem provides a mock function with given fields: userID, itemID
func (_m *SubscriptionI) GetByUserAndItem(userID uuid.UUID, itemID uuid.UUID) (*covenantmodels.Subscription, error) {
	ret := _m.Called(userID, itemID)

	var r0 *covenantmodels.Subscription
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) *covenantmodels.Subscription); ok {
		r0 = rf(userID, itemID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*covenantmodels.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(userID, itemID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *SubscriptionI) Insert(_a0 *covenantmodels.Subscription) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*covenantmodels.Subscription) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrder provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) NewOrder(_a0 *covenantmodels.Subscription, _a1 *covenantmodels.RequestOrder) (*warehousemodels.Order, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *warehousemodels.Order
	if rf, ok := ret.Get(0).(func(*covenantmodels.Subscription, *covenantmodels.RequestOrder) *warehousemodels.Order); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehousemodels.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*covenantmodels.Subscription, *covenantmodels.RequestOrder) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) SetStatus(_a0 string, _a1 covenantmodels.SubscriptionStatus) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, covenantmodels.SubscriptionStatus) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *SubscriptionI) Subscribe(_a0 uuid.UUID, _a1 uuid.UUID, _a2 uuid.UUID, _a3 string, _a4 uint64) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, string, uint64) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) Update(_a0 string, _a1 *covenantmodels.Subscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *covenantmodels.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ helpers.SubscriptionI = (*SubscriptionI)(nil)
